1. Чеки
    1. Каждый M товар в чеке для магазина
        prices.sort()
        summ = sum(prices) - sum(prices[:N // M])
    2. Каждый M товар в чеке для покупателя фантазера
        prices.sort(reverse=True)
        summ = sum(prices) - sum(prices[:N // M])
    3. Каждый M товар в чеке для покупателя реалиста
        prices.sort(reverse=True)
        summ = sum(prices) - sum(prices[M - 1::M])

2. Сисадмин / фура / закупка товаров
        boxes = sorted(boxes)
        cnt = []
        for box in boxes:
            if box <= s:
                s -= box
                cnt.append(box)

        s += cnt.pop()
        boxes = sorted(boxes)[::-1]
        for box in boxes:
            if box <= s:
                cnt.append(box)
                break
        print(len(cnt), cnt[-1])

3. Коробки / торты / кольца
        cakes = sorted(cakes)[::-1]
        last = cakes[0]
        cnt = 1
        for cake in cakes:
            if last - cake >= 8:
                last = cake
                cnt += 1
        print(cnt, last)

4. Лесопосадка / человеко посадка
    Идея: перебирать по два элемента, находящие на расстоянии K
    Алгоритм:
    trees = sorted(trees, key=lambda x: (-x[0], x[1]))
    for tree1, tree2 in zip(trees, trees[1:]):
        if tree1[0] == tree2[0]:
            if tree2[1] - tree1[1] == K + 1:
                print(tree1[0], tree1[1] + 1)
                break

5. Конференц-зал
        events = sorted(events, key=lambda x: x[1])
        approved = [events[0]]
        for event in events:
            if approved[-1][1] <= event[0]:
                approved.append(event)

        last = approved.pop()
        for event in events:
            if approved[-1][1] <= event[0] and event[0] > last[0]:
                print(event)
        print(len(approved) + 1, max(events)[0] - approved[-1][1])  # проверка есть ли выгодней разница между началом и концом


6. Места в зале
        with open("26_17537.txt") as file:
            n, m, k = map(int, file.readline().split())
            suitable = [m] * (k + 1)
            for i in file:
                row, col = map(int, i.split())
                suitable[col] = min(suitable[col], row - 1)  # сохраняем место на которое можем сесть

        ans = []
        for i in range(2, k + 1):
            place1, place2 = suitable[i - 1], suitable[i]  # аппендим подходящий ряд и макс. место из пары
            ans.append([min(place1, place2), i])

        print(max(ans))


7. Зачисление студентов / моряков / космонавтов
        with open("26_17565.txt") as file:
            n, s = map(int, file.readline().split())
            sailors = []
            for i in file:
                ID, b1, b2, b3, b4 = map(int, i.split())
                sailors.append([ID, (b1 + b2 + b3), b4])

        sailors = sorted(sailors, key=lambda x: (-x[1], -x[2]))

        # 1
        print(sailors[:s])
        print(sailors[s:s + 2])      # смотрим полупроходной
        print(len([i for i in sailors if i[1] == 154]))     # можно посмотреть глазами

8. Лидер продаж
        with open("26_17643.txt") as file:
            n = int(file.readline())
            products = {}
            average = []
            for i in file:
                art, price, status = map(int, i.split())
                average.append(price)
                if art not in products:
                    products[art] = [0, price, 0]
                if status == 1:
                    products[art][2] += 1   # кол-во остатков
                else:
                    products[art][0] += 1  # кол-во проданных

        average = sum(average) / len(average)  # средняя цена
        products = [i for i in products.values() if i[1] > average]  # находим в словаре и сохраняем в список дорогие товары

        products = sorted(products, key=lambda x: (-x[0], -x[1], x[2]))
        leader = products[0]

        print(leader[0] * leader[1], leader[2])

9. Решенные задачи
        with open("26_19256.txt") as file:
            n = int(file.readline())
            students = [list(map(int, i.split())) for i in file]

        students = sorted(students)
        ans = []
        cnt = 1
        for i in range(n - 1):
            st1, st2 = students[i], students[i + 1]
            if st1[0] == st2[0]:
                if st2[1] - st1[1] == 0:
                    continue
                if st2[1] - st1[1] == 1:
                    cnt += 1
                else:
                    cnt = 1
            else:
                cnt = 1
            ans.append([st1[0], cnt])

        ans = sorted(ans, key=lambda x: (-x[1], x[0]))
        print(ans[0])


10. Камеры хранения
        with open("26_7602.txt") as file:
            k = int(file.readline())
            n = int(file.readline())
            clients = [list(map(int, i.split())) for i in file]

        clients = sorted(clients)
        last = 0
        cnt = 0
        rooms = [0] * (k + 1)
        for c in clients:
            for i in range(1, len(rooms)):
                if c[0] >= rooms[i]:
                    rooms[i] = c[1] + 1
                    cnt += 1
                    last = i
                    break

        print(cnt, last)


11. Пик посещаемости
        with open('26_9847.txt') as f:
            N = int(f.readline())
            arr = [list(map(int, i.split())) for i in f if i]

        arr = sorted(arr)
        day = [0] * 1441
        for st, fn in arr:
            for i in range(st, fn):
                day[i] += 1

        m = max(day)
        res = []
        for i in range(len(day)):
            if day[i] == m:
                res.append(i)

        cnt = 1
        for i in range(len(res) - 1):
            p1, p2 = res[i: i + 2]
            if p2 - p1 > 1:
                cnt += 1
        print(cnt, m)


8. Детали
    with open("26_9793.txt") as file:
        n = int(file.readline())
        details = []
        for pos, i in enumerate(file, 1):
            sh, po = map(int, i.split())
            details.append([sh, 1, pos])   # шлифовка
            details.append([po, 2, pos])   # покраска

    details = sorted(details)

    conveyor = [0] * n
    last = 0
    for time, type, num in details:
        if num not in conveyor:
            if type == 1:
                free = conveyor.index(0)
                conveyor[free] = num
            else:
                free = conveyor[::-1].index(0)
                conveyor[n - free - 1] = num
            last = num

    print(last, conveyor.index(last))